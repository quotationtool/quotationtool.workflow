Remove
======

In an quotationtool application removal of database items is done in a
workflow. Users can ask for removing the item--they actually start a
quotationtool.remove workflow process on the item. So removal is
always controled by the site editors.

We need to set up the worklist for editorial review.

>>> from quotationtool.workflow.worklist import WorkList
>>> from quotationtool.workflow.interfaces import IWorkList
>>> import zope.component
>>> editor_items = WorkList()
>>> zope.component.provideUtility(editor_items, IWorkList, name='editor')

Register simple subscriber to make workflow events visible.

>>> def log_workflow(event):
...     print(event)

>>> import zope.event
>>> zope.event.subscribers.append(log_workflow)

Get workflow definition.

>>> from zope.wfmc.interfaces import IProcessDefinition
>>> import zope.component
>>> pd = zope.component.getUtility(IProcessDefinition,
...                                'quotationtool.remove')

>>> pd
ProcessDefinition('quotationtool.remove')

>>> pd.id
'quotationtool.remove'

Create some dummy item and container

>>> from zope.container.sample import SampleContainer
>>> from zope.container.contained import Contained
>>> container = SampleContainer()
>>> class Foo(Contained):
...     __name__ = __parent__ = None

The item must implement IRemovable, otherwise the workflow will end
with an exception. Normally this would be done in zcml.

>>> from zope.interface import classImplements
>>> from quotationtool.workflow.interfaces import IRemovable
>>> classImplements(Foo, IRemovable)

>>> container['foo'] = foo = Foo()
<...
>>> foo.__name__
u'foo'
>>> foo.__parent__ == container
True

>>> len(container)
1

>>> proc = pd()
>>> import datetime

The start method takes formal parameters:
1) The user-id of the user who asks the object to be removed.
2) The time of the process is started.
3) A message why the item should be removed.
4) The workflow history. 
5) The object which is asked to be removed. It is expected to 
   implement zope.location.interfaces.IContained.

>>> proc.start('chris', datetime.datetime.now(), u"It's a foolisch item.", None, foo)
ProcessStarted(Process('quotationtool.remove'))
Transition(None, Activity('quotationtool.remove.start'))
ActivityStarted(Activity('quotationtool.remove.start'))
ActivityFinished(Activity('quotationtool.remove.start'))
Transition(Activity('quotationtool.remove.start'), Activity('quotationtool.remove.review'))
ActivityStarted(Activity('quotationtool.remove.review'))
...

>>> item = editor_items.pop()
>>> item
<quotationtool.workflow.remove.RemoveWorkItem object at 0x...>

>>> item.finish('postpone')
<...
WorkItemFinished(u'remove')
ActivityFinished(Activity('quotationtool.remove.review'))
Transition(Activity('quotationtool.remove.review'), Activity('quotationtool.remove.review'))
ActivityStarted(Activity('quotationtool.remove.review'))
...

>>> len(container)
1

>>> item = editor_items.pop()
>>> item.finish('remove')
<...
WorkItemFinished(u'remove')
ActivityFinished(Activity('quotationtool.remove.review'))
Transition(Activity('quotationtool.remove.review'), Activity('quotationtool.remove.remove'))
ActivityStarted(Activity('quotationtool.remove.remove'))
ActivityFinished(Activity('quotationtool.remove.remove'))
ProcessFinished(Process('quotationtool.remove'))


>>> len(container)
0


Remove simple logger from subscriber list. 

>>> zope.event.subscribers.remove(log_workflow)


Restrictions
~~~~~~~~~~~~

Similar items
+++++++++++++


If there is an other work item which takes the object to be removed as
workflow relevant data, the removal will not be possible. For removal
would break these other workflow processes. 

>>> container['bar'] = bar = Foo()

>>> from zope.intid.interfaces import IIntIds
>>> intids = zope.component.getUtility(IIntIds, name='')
>>> barid = intids.queryId(bar)

>>> isinstance(barid, int)
True

>>> proc1 = pd()
>>> proc1.start('chris', datetime.datetime.now(), u"It's a foolisch item.", None, bar)

>>> proc2 = pd()
>>> proc2.start('bob', datetime.datetime.now(), u"It's a foolisch item", None, bar)

>>> item = editor_items.pop()

>>> item.contributor
'bob'

>>> item.finish('remove')
Traceback (most recent call last):
...
ProcessError: wfmc-remove-still-similar

We can learn more using the ISimilarWorkItems interface:

>>> from quotationtool.workflow.interfaces import ISimilarWorkItems
>>> ISimilarWorkItems.providedBy(item)
True

>>> list(item.getSimilarWorkItems())
[<quotationtool.workflow.remove.RemoveWorkItem object at 0x...>]


There is also in indexer that we want to test:

>>> from z3c.indexer.interfaces import IIndexer
>>> indexer = zope.component.getAdapter(item, IIndexer, name='workflow-relevant-oids')
>>> indexer.value == [barid]
True

>>> del container['bar']

Relations
+++++++++

If there are relations of any kind to the item asked to be removed,
the removal will fail.

First we need to define some content.

>>> from zope.interface import Interface, implements
>>> class IFoo(Interface):
...     pass
...
>>> class Foo(Contained):
...     implements(IFoo, IRemovable)

>>> from quotationtool.relation.schema import Relation
>>> class IBar(Interface):
...      ref = Relation(
...	     title=u"Reference to some foo.", 
...	     precondition=[IFoo])
...

>>> from zope.schema.fieldproperty import FieldProperty
>>> class Bar(Contained):
...      implements(IBar, IRemovable)
...      ref = FieldProperty(IBar['ref'])
...

>>> container['foo'] = foo = Foo()
>>> container['bar'] = bar = Bar()
>>> bar.ref = foo

>>> fooid = intids.getId(foo)
>>> barid = intids.getId(bar)

Then we need a relation catalog.

>>> import zc.relation
>>> from quotationtool.relation import dump, load
>>> cat = zc.relation.catalog.Catalog(dump, load)
>>> zope.component.provideUtility(cat, zc.relation.interfaces.ICatalog)
>>> cat.addValueIndex(IBar['ref'], dump=dump, load=load, name='ibar-ref')

>>> def dummy(obj, catalog):
...     return getattr(obj, 'ref', None)
>>> cat.addValueIndex(dummy, dump, load)

>>> cat.index(bar)
>>> cat.index(foo)

And we assert that the relation catalog works:

>>> referrers = cat.findRelationTokens(
...     cat.tokenizeQuery({'ibar-ref': foo}))
...
>>> list(referrers) == [barid]
True

>>> [info['name'] for info in cat.iterValueIndexInfo()]
['dummy', 'ibar-ref']


>>> proc = pd()
>>> proc.start('jonathan', datetime.datetime.now(), u"It's a foolisch item.", None, foo)
>>> item = editor_items.pop()


Since there is a relation from foo to bar the attempt to remove foo
fails.

>>> item.finish('remove')
Traceback (most recent call last):
...
ProcessError: wfmc-remove-still-relations


But if bar is unindexed then we will be able to remove foo.

>>> cat.unindex(bar)

>>> item.finish('remove')
>>> 'foo' in container
False
